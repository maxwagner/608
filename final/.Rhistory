len(training_trans)
length(training_trans)
dim(training_trans)
dim(training_trans_model_bin)
dim(training_trans_eval_bin)
predict2 <- round(predict(poisson2,evaluation_trans , type = 'response'), 4)
predict2
length(predict2)
d<- data.frame(class=training_trans_eval_bin$TARGET_FLAG, scored.class=ifelse(predict2>0.5,1,0))
d<- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
training_trans_eval_bin
predict2 <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d<- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
precision_c(d)
sensitivity_c(d)
specificity_c(d)
f1_score(d)
require("pROC")
d_roc <- roc(training_trans_eval_bin$TARGET_FLAG,predict2)
d_roc <- roc(training_trans_eval_bin$TARGET,predict2)
plot(d_roc, main = "ROC with pROC")
table(training_trans$TARGET)
summary(training_trans$TARGET)
training_trans$TARGET
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
precision_c(d)
sensitivity_c(d)
specificity_c(d)
f1_score(d)
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
head(d)
confusion_matrix(d)
head(d, 50)
head(predict)
round(head(predict),1)
round(head(predict),0)
predict <- round(predict(poisson2,training_eval_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0))
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0)
confusion_matrix(d)
accuracy(d)
head(d)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0)
confusion_matrix(d)
accuracy(d)
head(d)
d<-null
d<-NULL
d
head(predict)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict,0))
confusion_matrix(d)
accuracy(d)
round(predict,0)
head(d)
nrow(d$class == d$scored.class)
nrow(d[d$class == d$scored.class)]
nrow(d[d$class == d$scored.class])
nrow(d[d$class == d$scored.class,])
nrow(d)
nrow(d[d$class >= d$scored.class-1 && d$class <= d$scored.class+1,])
nrow(d[d$class <= d$scored.class-1 && d$class >= d$scored.class+1,])
nrow(d[d$class == d$scored.class,]) / nrow(d)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
diff_sq <- (predict - training_trans_eval_bin$TARGET)^2
se <- mean(sqrt(diff_sq))
diff_sq <- (predict2 - mean(training_trans_eval_bin$TARGET))^2
sd <- mean(sqrt(diff_sq))
sd
diff_sq <- (predict2 - training_trans_eval_bin$TARGET)^2
se <- mean(sqrt(diff_sq))
se
round(predict(poisson3, evaluation_trans ,type = 'response'), 4)
round(predict(poisson2, evaluation_trans ,type = 'response'), 4)
predict2[predict2 == 1]
head(predict2)
head(training_trans_eval_bin)
head(training_trans_eval_bin$TARGET)
training_trans_eval_bin$TARGET[training_trans_eval_bin$TARGET == 1]
qq <- rbind(training_trans_eval_bin$TARGET, predict2)
head(qq)
qq <- cbind(training_trans_eval_bin$TARGET, predict2)
head(qq)
colnames(qq) <- c("real", "predict")
head(qq)
summary(qq)
qq1 <- qq[real == 1]
qq1 <- qq["real" == 1]
qq1
qq1 <- qq["real" == 1,]
qq1
qq1 <- qq[qq$real == 1,]
qq1 <- subset(qq, real == 1)
qq1 <- subset(qq, "real" == 1)
qq1
qq <- cbind(training_trans_eval_bin$TARGET, predict2)
colnames(qq) <- c("real", "predict")
qq1 <- qq[which(qq$real == 1),]
qq <- data.frame((training_trans_eval_bin$TARGET, predict2))
qq <- data.frame(cbind(training_trans_eval_bin$TARGET, predict2))
colnames(qq) <- c("real", "predict")
qq1 <- qq[which(qq$real == 1),]
qq1
qq0 <- qq[which(qq$real == 0),]
qq1 <- qq[which(qq$real == 1),]
qq2 <- qq[which(qq$real == 2),]
qq3 <- qq[which(qq$real == 3),]
qq4 <- qq[which(qq$real == 4),]
qq5 <- qq[which(qq$real == 5),]
qq6 <- qq[which(qq$real == 6),]
qq7 <- qq[which(qq$real == 7),]
qq8 <- qq[which(qq$real == 8),]
mysd <- function(predict, target) {
diff_sq <- (predict - mean(target))^2
return(mean(sqrt(diff_sq)))
}
mysd(predict2, training_trans_eval_bin$TARGET)
myse <- function(predict, target) {
diff_sq <- (predict - target)^2
return(mean(sqrt(diff_sq)))
}
myse(predict2, training_trans_eval_bin$TARGET)
mysd(qq0$predict, qq0$real)
table(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
data.frame(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
myse(qq0$predict, qq0$real)
mysd(qq0$predict, qq0$real)
mysd(predict2, training_trans_eval_bin$TARGET)
myse(predict2, training_trans_eval_bin$TARGET)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
#functions for sd and se
mysd <- function(predict, target) {
diff_sq <- (predict - mean(target))^2
return(mean(sqrt(diff_sq)))
}
myse <- function(predict, target) {
diff_sq <- (predict - target)^2
return(mean(sqrt(diff_sq)))
}
mysd(predict2, training_trans_eval_bin$TARGET)
myse(predict2, training_trans_eval_bin$TARGET)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
mysd(qq0$predict, qq0$real)
qq0$predict
qq0$real
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
rbind(
myse(qq0$predict, qq0$real),
myse(qq1$predict, qq1$real),
myse(qq2$predict, qq2$real),
myse(qq3$predict, qq3$real),
myse(qq4$predict, qq4$real),
myse(qq5$predict, qq5$real),
myse(qq6$predict, qq6$real),
myse(qq7$predict, qq7$real),
myse(qq8$predict, qq8$real)
)
shiny::runApp('GitHub/608/final')
setwd("~/GitHub/608/final")
shiny::runApp()
shiny::runApp()
install.packages("shinyjs")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(shinyjs)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/GitHub/608/lecture3/q2')
library(plyr); library(dplyr)
shiny::runApp('~/GitHub/608/lecture3/q2')
shiny::runApp('~/GitHub/608/lecture3/q2')
This is an included md file.
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("DT")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/GitHub/608/lecture3/q1')
library(tidyr)
library(ggplot2)
library(shiny)
# load the cleaned data frame
records <- read.csv("data/records.csv", stringsAsFactors = FALSE)
# fix dates from the csv load in
records$Date <- as.Date(records$Date, "%d-%b-%y")
# each type of data is different, load them separate
########## sprints ##########
# measured in seconds
records_sprints <- subset(records,
records$Event == "100m" |
records$Event == "100mh" |
records$Event == "110mh" |
records$Event == "200m" |
records$Event == "400m" |
records$Event == "400mh" |
records$Event == "4x100m"
)
records_sprints$Mark <- as.numeric(records_sprints$Mark)
#############################
##########  mid and long distance ##########
# measured in minutes:seconds
# convert to minutes
records_mid <- subset(records,
records$Event == "800m" |
records$Event == "1500m" |
records$Event == "5000m" |
records$Event == "1000m" |
records$Event == "4x400m"
)
records_mid <- separate(records_mid, Mark, c("minutes", "seconds"), sep = ":")
records_mid$seconds <- (as.numeric(records_mid$seconds)/60)
records_mid$Mark <- as.numeric(records_mid$minutes) + as.numeric(records_mid$seconds)
records_mid <- subset(records_mid, select = -c(minutes, seconds))
records_mid$Mark <- as.numeric(records_mid$Mark)
############################################
########## marathon ##########
# measured in hours:minutes:seconds
# converted to hours
records_marathon <- subset(records, records$Event == "marathon")
records_marathon <- separate(records_marathon, Mark, c("hours", "minutes", "seconds"), sep = ":")
records_marathon$minutes <- as.numeric(records_marathon$minutes)/60
records_marathon$seconds <- as.numeric(records_marathon$seconds)/60/60
records_marathon$Mark <-
as.numeric(records_marathon$hours) +
as.numeric(records_marathon$minutes) +
as.numeric(records_marathon$seconds)
records_marathon <- subset(records_marathon, select = -c(hours, minutes, seconds))
records_marathon$Mark <- as.numeric(records_marathon$Mark)
##############################
########## field  ##########
# measured in meters
records_field <- subset(records,
records$Event == "discus" |
records$Event == "hammer" |
records$Event == "high-jump" |
records$Event == "javelin" |
records$Event == "long-jump" |
records$Event == "pole-vault" |
records$Event == "shot-put" |
records$Event == "triple-jump"
)
records_field$Mark <- as.numeric(records_field$Mark)
############################
function(input, output, session) {
output$plot <- renderPlot({
plot(cars, type=input$plotType)
})
output$plot2 <- renderPlot({
records_marathon_flex <- subset(records_marathon, records_marathon$Sex == input$plot2gender )
qplot(records_marathon_flex$Date, records_marathon_flex$Mark, geom = "point")
})
}
table(records$Event)
table(records$Event)[1]
table(records$Event)[1,]
table(records$Event)$1
table(records$Event)$
table(records$Event)$[1]
table(records$Event)[[1]]
qq <- table(records$Event)
qq
qq[1]
qq[2]
qq$
q
shiny::runApp()
shiny::runApp()
table(subset(records, records$event == "200m"))
table(subset(records, records$Event == "200m"))
subset(records, records$Event == "200m")
shiny::runApp()
records <- read.csv("data/records.csv", stringsAsFactors = FALSE)
subset(records, records$Event == "200m")
records <- read.csv("data/records.csv", stringsAsFactors = FALSE)
subset(records, records$Event == "200m")
records <- read.csv("data/records.csv", stringsAsFactors = FALSE)
subset(records, records$Event == "200m")
records$Date <- as.Date(records$Date, "%d-%b-%Y")
subset(records, records$Event == "200m")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(stringi)
shiny::runApp()
names(records)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input$event == "800m"
input$event = "800m"
input = c()
input$event = "100m"
input
dataset_flex <- records_sprints
dataset_flex <- subset(dataset_flex, dataset_flex$Event == input$event)
input$plot2gender = "male"
dataset_flex <- subset(dataset_flex, dataset_flex$Sex == input$plot2gender)
dataset_flex[min(dataset_flex$Mark),]
dataset_flex[max(dataset_flex$Mark),]
ggplot(data = dataset_flex) +
theme_minimal() +
max(dataset_flex$Mark)
min(dataset_flex$Mark)
dataset_flex[,min(dataset_flex$Mark)]
dataset_flex[min(dataset_flex$Mark),]
dataset_flex[1,]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
("http://dailydsports.com/wp-content/uploads/2015/08/20150821-3-bolt.jpg")[]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
![]("images/olympic-logo.png")
shiny::runApp()
q
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(tidyr)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# About
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(records)
head(records)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(googleVis)
shiny::runApp('~/GitHub/608/lecture3/q1')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
