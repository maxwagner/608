summary(poisson1)
BIC(poisson1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
#Model2 - Significant Reduced Model, got rid of even slightly insig variables
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
BIC(poisson2)
BIC(poisson2)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
poisson0 <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson0)
BIC(poisson0)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
neg_binomial1 <- glm.nb(TARGET ~ ResidualSugar +FreeSulfurDioxide + TotalSulfurDioxide + Alcohol + LabelAppeal + STARS_1_BIN + STARS_2_BIN + STARS_3_BIN + STARS_4_BIN, data = training_trans)
summary(neg_binomial1)
neg_binomial2 <- glm.nb(TARGET ~ ResidualSugar +FreeSulfurDioxide + TotalSulfurDioxide + Alcohol + LabelAppeal + STARS_1_BIN + STARS_2_BIN + STARS_3_BIN + STARS_4_BIN, data = training_trans)
summary(neg_binomial2)
neg_binomial1 <- glm.nb(TARGET ~ . , family = "binomial",  data = training_trans)
neg_binomial1 <- glm.nb(TARGET ~ . ,  data = training_trans)
summary(neg_binomial1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
neg_binomial2 <- glm.nb(TARGET ~ . ,  data = training_trans_reduced)
summary(neg_binomial2)
mlr1 <- glm(TARGET ~ . , data = training_trans)
summary(mlr1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
mlr2 <- glm(TARGET ~ . , data = training_trans_reduced)
summary(mlr2)
BIC(neg_binomial1)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
mlr2 <- glm(TARGET ~ . , data = training_trans_reduced)
summary(mlr2)
BIC(mlr2)
BIC(poisson0)
BIC(neg_binomial1)
BIC(neg_binomial2)
BIC(mlr1)
BIC(mlr2)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
poisson0 <- glm(TARGET ~ . , family = "poisson", data = training_trans)
summary(poisson0)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
BIC(poisson2)
training_trans_reduced <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH))
poisson1 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced)
summary(poisson1)
BIC(poisson1)
mlr1 <- glm(TARGET ~ . , data = training_trans)
summary(mlr1)
BIC(mlr1)
training_trans_reduced_signif <- subset(training_trans, select = -c(FixedAcidity, CitricAcid, ResidualSugar, Density, pH,
Chlorides, Sulphates, Alcohol, FreeSulfurDioxide,
TotalSulfurDioxide))
poisson2 <- glm(TARGET ~ . , family = "poisson", data = training_trans_reduced_signif)
summary(poisson2)
BIC(poisson2)
plot(poisson0)
m3 <- summary(poisson2)
confusion_matrix <- function(d){
data.frame(tp=nrow(d[d$class==1 & d$scored.class==1,]),
tn=nrow(d[d$class==0 & d$scored.class==0,]),
fp=nrow(d[d$class==0 & d$scored.class==1,]),
fn=nrow(d[d$class==1 & d$scored.class==0,])
)
}
accuracy<-function(d){
f <- confusion_matrix(d)
(f$tp+f$tn)/(f$tp+f$fp+f$tn+f$fn)
}
classification_error_rate<-function(d){
f <- confusion_matrix(d)
(f$fp+f$fn)/(f$tp+f$fp+f$tn+f$fn)
}
precision_c<-function(d){
f <- confusion_matrix(d)
(f$tp)/(f$tp+f$fp)
}
sensitivity_c<-function(d){
f <- confusion_matrix(d)
(f$tp)/(f$tp+f$fn)
}
specificity_c<-function(d){
f <- confusion_matrix(d)
(f$tn)/(f$tn+f$fp)
}
f1_score<-function(d){
p<- precision_c(d)
s<- sensitivity_c(d)
2*p*s/(p+s)
}
d<- data.frame(class=training_trans_eval_bin$TARGET_FLAG, scored.class=ifelse(predict2>0.5,1,0))
training_trans_model_bin
training_trans
len(training_trans)
length(training_trans)
dim(training_trans)
dim(training_trans_model_bin)
dim(training_trans_eval_bin)
predict2 <- round(predict(poisson2,evaluation_trans , type = 'response'), 4)
predict2
length(predict2)
d<- data.frame(class=training_trans_eval_bin$TARGET_FLAG, scored.class=ifelse(predict2>0.5,1,0))
d<- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
training_trans_eval_bin
predict2 <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d<- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
precision_c(d)
sensitivity_c(d)
specificity_c(d)
f1_score(d)
require("pROC")
d_roc <- roc(training_trans_eval_bin$TARGET_FLAG,predict2)
d_roc <- roc(training_trans_eval_bin$TARGET,predict2)
plot(d_roc, main = "ROC with pROC")
table(training_trans$TARGET)
summary(training_trans$TARGET)
training_trans$TARGET
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
precision_c(d)
sensitivity_c(d)
specificity_c(d)
f1_score(d)
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict2>0.5,1,0))
predict <- round(predict(poisson2,training_trans_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_model_bin$TARGET, scored.class=ifelse(predict>0.5,1,0))
confusion_matrix(d)
accuracy(d)
classification_error_rate(d)
head(d)
confusion_matrix(d)
head(d, 50)
head(predict)
round(head(predict),1)
round(head(predict),0)
predict <- round(predict(poisson2,training_eval_model_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0))
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0)
confusion_matrix(d)
accuracy(d)
head(d)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict),0)
confusion_matrix(d)
accuracy(d)
head(d)
d<-null
d<-NULL
d
head(predict)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
d <- data.frame(class=training_trans_eval_bin$TARGET, scored.class=round(predict,0))
confusion_matrix(d)
accuracy(d)
round(predict,0)
head(d)
nrow(d$class == d$scored.class)
nrow(d[d$class == d$scored.class)]
nrow(d[d$class == d$scored.class])
nrow(d[d$class == d$scored.class,])
nrow(d)
nrow(d[d$class >= d$scored.class-1 && d$class <= d$scored.class+1,])
nrow(d[d$class <= d$scored.class-1 && d$class >= d$scored.class+1,])
nrow(d[d$class == d$scored.class,]) / nrow(d)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
predict <- round(predict(poisson2,training_trans_eval_bin , type = 'response'), 4)
diff_sq <- (predict - training_trans_eval_bin$TARGET)^2
se <- mean(sqrt(diff_sq))
diff_sq <- (predict2 - mean(training_trans_eval_bin$TARGET))^2
sd <- mean(sqrt(diff_sq))
sd
diff_sq <- (predict2 - training_trans_eval_bin$TARGET)^2
se <- mean(sqrt(diff_sq))
se
round(predict(poisson3, evaluation_trans ,type = 'response'), 4)
round(predict(poisson2, evaluation_trans ,type = 'response'), 4)
predict2[predict2 == 1]
head(predict2)
head(training_trans_eval_bin)
head(training_trans_eval_bin$TARGET)
training_trans_eval_bin$TARGET[training_trans_eval_bin$TARGET == 1]
qq <- rbind(training_trans_eval_bin$TARGET, predict2)
head(qq)
qq <- cbind(training_trans_eval_bin$TARGET, predict2)
head(qq)
colnames(qq) <- c("real", "predict")
head(qq)
summary(qq)
qq1 <- qq[real == 1]
qq1 <- qq["real" == 1]
qq1
qq1 <- qq["real" == 1,]
qq1
qq1 <- qq[qq$real == 1,]
qq1 <- subset(qq, real == 1)
qq1 <- subset(qq, "real" == 1)
qq1
qq <- cbind(training_trans_eval_bin$TARGET, predict2)
colnames(qq) <- c("real", "predict")
qq1 <- qq[which(qq$real == 1),]
qq <- data.frame((training_trans_eval_bin$TARGET, predict2))
qq <- data.frame(cbind(training_trans_eval_bin$TARGET, predict2))
colnames(qq) <- c("real", "predict")
qq1 <- qq[which(qq$real == 1),]
qq1
qq0 <- qq[which(qq$real == 0),]
qq1 <- qq[which(qq$real == 1),]
qq2 <- qq[which(qq$real == 2),]
qq3 <- qq[which(qq$real == 3),]
qq4 <- qq[which(qq$real == 4),]
qq5 <- qq[which(qq$real == 5),]
qq6 <- qq[which(qq$real == 6),]
qq7 <- qq[which(qq$real == 7),]
qq8 <- qq[which(qq$real == 8),]
mysd <- function(predict, target) {
diff_sq <- (predict - mean(target))^2
return(mean(sqrt(diff_sq)))
}
mysd(predict2, training_trans_eval_bin$TARGET)
myse <- function(predict, target) {
diff_sq <- (predict - target)^2
return(mean(sqrt(diff_sq)))
}
myse(predict2, training_trans_eval_bin$TARGET)
mysd(qq0$predict, qq0$real)
table(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
data.frame(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real)
)
myse(qq0$predict, qq0$real)
mysd(qq0$predict, qq0$real)
mysd(predict2, training_trans_eval_bin$TARGET)
myse(predict2, training_trans_eval_bin$TARGET)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
#functions for sd and se
mysd <- function(predict, target) {
diff_sq <- (predict - mean(target))^2
return(mean(sqrt(diff_sq)))
}
myse <- function(predict, target) {
diff_sq <- (predict - target)^2
return(mean(sqrt(diff_sq)))
}
mysd(predict2, training_trans_eval_bin$TARGET)
myse(predict2, training_trans_eval_bin$TARGET)
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
mysd(qq0$predict, qq0$real)
qq0$predict
qq0$real
rbind(mysd(qq0$predict, qq0$real),
myse(qq0$predict, qq0$real),
mysd(qq1$predict, qq1$real),
myse(qq1$predict, qq1$real),
mysd(qq2$predict, qq2$real),
myse(qq2$predict, qq2$real),
mysd(qq3$predict, qq3$real),
myse(qq3$predict, qq3$real),
mysd(qq4$predict, qq4$real),
myse(qq4$predict, qq4$real),
mysd(qq5$predict, qq5$real),
myse(qq5$predict, qq5$real),
mysd(qq6$predict, qq6$real),
myse(qq6$predict, qq6$real),
mysd(qq7$predict, qq7$real),
myse(qq7$predict, qq7$real),
mysd(qq8$predict, qq8$real),
myse(qq8$predict, qq8$real)
)
rbind(
myse(qq0$predict, qq0$real),
myse(qq1$predict, qq1$real),
myse(qq2$predict, qq2$real),
myse(qq3$predict, qq3$real),
myse(qq4$predict, qq4$real),
myse(qq5$predict, qq5$real),
myse(qq6$predict, qq6$real),
myse(qq7$predict, qq7$real),
myse(qq8$predict, qq8$real)
)
library(tidyr)
library(ggplot2)
library(shiny)
library(stringi)
# load the cleaned data frame
records <- read.csv("data/records.csv", stringsAsFactors = FALSE)
# fix dates from the csv load in
records$Date <- as.Date(records$Date, "%d-%b-%Y")
# each type of data is different, load them separate
########## sprints ##########
# measured in seconds
records_sprints <- subset(records,
records$Event == "100m" |
records$Event == "100mh" |
records$Event == "110mh" |
records$Event == "200m" |
records$Event == "400m" |
records$Event == "400mh" |
records$Event == "4x100m"
)
records_sprints$Mark <- as.numeric(records_sprints$Mark)
#############################
##########  mid and long distance ##########
# measured in minutes:seconds
# convert to minutes
records_mid <- subset(records,
records$Event == "800m" |
records$Event == "1500m" |
records$Event == "5000m" |
records$Event == "10000m" |
records$Event == "4x400m"
)
records_mid <- separate(records_mid, Mark, c("minutes", "seconds"), sep = ":")
records_mid$seconds <- (as.numeric(records_mid$seconds)/60)
records_mid$Mark <- as.numeric(records_mid$minutes) + as.numeric(records_mid$seconds)
records_mid <- subset(records_mid, select = -c(minutes, seconds))
records_mid$Mark <- as.numeric(records_mid$Mark)
############################################
########## marathon ##########
# measured in hours:minutes:seconds
# converted to hours
records_marathon <- subset(records, records$Event == "marathon")
records_marathon <- separate(records_marathon, Mark, c("hours", "minutes", "seconds"), sep = ":")
records_marathon$minutes <- as.numeric(records_marathon$minutes)/60
records_marathon$seconds <- as.numeric(records_marathon$seconds)/60/60
records_marathon$Mark <-
as.numeric(records_marathon$hours) +
as.numeric(records_marathon$minutes) +
as.numeric(records_marathon$seconds)
records_marathon <- subset(records_marathon, select = -c(hours, minutes, seconds))
records_marathon$Mark <- as.numeric(records_marathon$Mark)
##############################
########## field  ##########
# measured in meters
records_field <- subset(records,
records$Event == "discus" |
records$Event == "hammer" |
records$Event == "high-jump" |
records$Event == "javelin" |
records$Event == "long-jump" |
records$Event == "pole-vault" |
records$Event == "shot-put" |
records$Event == "triple-jump"
)
records_field$Mark <- as.numeric(records_field$Mark)
############################
# s1
s1 <- subset(records_field, records_field$Event == "discus")
s1 <- subset(s1, s1$Sex == "male")
#
# s2
s2 <- subset(records_field, records_field$Event == "hammer")
s2 <- subset(s2, s2$Sex == "female")
#
setwd("~/GitHub/608/final")
library(tidyr)
library(ggplot2)
library(shiny)
library(stringi)
# load the cleaned data frame
records <- read.csv("data/records.csv", stringsAsFactors = FALSE)
# fix dates from the csv load in
records$Date <- as.Date(records$Date, "%d-%b-%Y")
# each type of data is different, load them separate
########## sprints ##########
# measured in seconds
records_sprints <- subset(records,
records$Event == "100m" |
records$Event == "100mh" |
records$Event == "110mh" |
records$Event == "200m" |
records$Event == "400m" |
records$Event == "400mh" |
records$Event == "4x100m"
)
records_sprints$Mark <- as.numeric(records_sprints$Mark)
#############################
##########  mid and long distance ##########
# measured in minutes:seconds
# convert to minutes
records_mid <- subset(records,
records$Event == "800m" |
records$Event == "1500m" |
records$Event == "5000m" |
records$Event == "10000m" |
records$Event == "4x400m"
)
records_mid <- separate(records_mid, Mark, c("minutes", "seconds"), sep = ":")
records_mid$seconds <- (as.numeric(records_mid$seconds)/60)
records_mid$Mark <- as.numeric(records_mid$minutes) + as.numeric(records_mid$seconds)
records_mid <- subset(records_mid, select = -c(minutes, seconds))
records_mid$Mark <- as.numeric(records_mid$Mark)
############################################
########## marathon ##########
# measured in hours:minutes:seconds
# converted to hours
records_marathon <- subset(records, records$Event == "marathon")
records_marathon <- separate(records_marathon, Mark, c("hours", "minutes", "seconds"), sep = ":")
records_marathon$minutes <- as.numeric(records_marathon$minutes)/60
records_marathon$seconds <- as.numeric(records_marathon$seconds)/60/60
records_marathon$Mark <-
as.numeric(records_marathon$hours) +
as.numeric(records_marathon$minutes) +
as.numeric(records_marathon$seconds)
records_marathon <- subset(records_marathon, select = -c(hours, minutes, seconds))
records_marathon$Mark <- as.numeric(records_marathon$Mark)
##############################
########## field  ##########
# measured in meters
records_field <- subset(records,
records$Event == "discus" |
records$Event == "hammer" |
records$Event == "high-jump" |
records$Event == "javelin" |
records$Event == "long-jump" |
records$Event == "pole-vault" |
records$Event == "shot-put" |
records$Event == "triple-jump"
)
records_field$Mark <- as.numeric(records_field$Mark)
############################
# s1
s1 <- subset(records_field, records_field$Event == "discus")
s1 <- subset(s1, s1$Sex == "male")
#
# s2
s2 <- subset(records_field, records_field$Event == "hammer")
s2 <- subset(s2, s2$Sex == "female")
#
shiny::runApp()
